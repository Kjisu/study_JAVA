

<배열 Array>

# 배열이 필요한 이유 
	
	* 배열 : '같은 타입' 의 여러 변수를 하나의 묶음으로 다루는 것( 여러 타입 섞어서 배열 만들기X)
	
	* 변수에는 하나의 데이터 밖에 저장하지 못함. 그래서 많은 데이터를 한 번에 저장시키기 위해 필요!
	
	
# 배열의 선언 , 생성, 초기화

	* 배열을 다루기 위한 참조변수의 공간 만들기 -> 배열 선언
	* '값을 저장하는 공간'(배열) 만들기 -> 생성   // 배열은 반드시 생성할 때 요소의 갯수(저장공간 갯수)를 지정해줘야 한다
	* 값은 저장하는 공간인 배열에 값을 저장 -> 초기화
	
	- 배열은 각 저장공간이 연속적으로 배치되어 있음
	
	String[] score = new String[3];
	     '선언'         '생성' // 3개의 저장공간 생성(인덱스 범위 0~2),String타입의 기본값인 null이 배열 공간에 저장 
	score[0] = 100;
	score[1] = 90;  // '초기화'
	
	- 변수 score은 배열을 다루는 데 필요한 참조변수일 뿐 값을 저장하기 위한 공간 X
	- 참조변수 score + 인덱스 번호를 통해 배열의 요소에 접근가능 , 값을 저장하거나 읽어올 수 있음
	
# 배열의 길이, 인덱스 
	
	* 인덱스 : 배열의 요소마다 붙여진 일련번호
	    인덱스 범위 : 0 ~ (배열길이-1)
	
		int[] num = new int[5]; // 총 5개의 요소 가짐(저장공간5개)  // 인덱스 범위 = 0~4
		
	* 장점 
		- index로 '상수' 대신 '변수' or '수식' 사용 가능.
		- 그래서 이렇게 쓸 수 있는 것!
			
			for(int i=0;i<5;i++){
				score[i] = i*10; // 변수 사용
			}
			
			int tmp = score[i+1]; // 수식 사용

	* 단점 
		- index의 범위를 벗어난 값을 index로 사용하지 않아야 한다는 것!! (프로젝트 할 때 이것때문에 계속 에러뜸!!)
		- 즉, index의 범위를 벗어난 값을 index로 사용하지 않아야 함.
		- 그렇지 않으면 ArrayIndexOfBoundException 발생
		
		for(int i=0;i<img.size;i++){
			<img src="./upload/<%=rc.img[i] %>"> // 만약 루프가 5번 돈다면 0~4까지의 요소가 있어야 한다 
												 // img[4] = null 이게 되면 -> ArrayIndexOfBoundException
		}	
		
	
	* 배열 길이
		- 배열 요소의 갯수. 값을 저장할 수 있는 공간의 개수
		- int 범위의 양의 정수 (0포함) => 배열의 길이가 0이 될 수도 있다.
			int[] arr = new int[0];
		
		- 생성할 때 정해진 배열 길이는 변경X
		- for 반복문 中 조건식에서 직접 배열의 길이를 적어주는 것보다 '배열이름.length'를 사용하는 것이 좋음
			=> 배열 길이가 변경될 경우 조건식을 바꾸지 않아도 되니까!!
			=> 만약 직접 배열의 길이를 적어줬다면 오류 발생 가능성 있음
			
	* 배열 길이 부족한 경우 ( #배열 복사)
		- 배열에 저장할 공간이 부족한 경우
			=> 더 큰 배열을 하나 생성 - 기존에 저장된 값들을 새로운 배열에 옮겨담기.
		- 배열의 길이를 적게 잡으면 배열 길이가 부족한 경우가 발생할 수 있고 너무 넉넉하게 잡으면 메모리를 많이 잡아먹음
		- 보통 저장할 데이터의 2배 정도 크기의 배열을 생성한다.
		
# 배열 초기화
	
	1. score[0] = 100;
	2. int[] score = {100,90,80};
	
	* 배열은 생성과 동시에 자신의 타입에 해당하는 값으로 자동 초기화되기 때문에 사용하기 전에 따로 초기화를 해주지 않아도 되지만,
		원하는 값을 저장하려면 따로 각 요소마다 값을 지정해 줘야 한다.
		
	* 배열의 길이가 긴 경우 -> for문을 이용하여 초기화 ( 이렇게 하려면 저장하려는 값들에 일정한 규칙이 있어야 함!)
		
	* 괄호 안에 아무것도 넣지 않으면 길이가 0인 배열 생성
		int[] score = new int[0];
		int[] score = new int[]{};
		int[] score = {};
		
	** 배열 출력
		- 배열에 저장된 값 출력 
		 	1. for문 사용
		 	2. Arrays.toString(배열이름); 메서드 사용 => [첫번째 요소, 두번째 요소 ... ] 와 같은 문자열로 만들어 반환
		 	
# 배열 복사 하는 방법

	1. for문 이용 (요소 하나하나에 접근하여 복사)
		
		int[] arr1 = {10,20,30,40};
		
		int[] tmp = new int[8];
		
		for(int i=0;i<arr1.length;i++){
			tmp[i]=arr1[i];
		}
		
		arr1 = tmp;
		
	2. (▶효율적)System.arraycopy(); -> 지정된 범위의 값들을 통째로 복사		
	
		int[] arr1 = {10,20,30,40};
		
		int[] tmp = new int[8];
		
		System.arraycopy(arr1,0,tmp,0,arr1.length);
					     arr1[0]에서 imp[0]으로 arr1.length개의 데이터 복사
		※주의 : 복사하려는 내용보다 여유공간이 적으면 ArrayIndexOutofBound오류 발생함!
		
		※char배열은 for문을 사용하지 않고도 배열에 저장된 모든 요소들을 출력할 수 있다.
			=> char[] alphabet = {'a','b','c'};
				System.out.println(alphabet); // abc출력됨
	
	
	
	
	
	
	
	
	  